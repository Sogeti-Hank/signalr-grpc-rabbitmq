@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using global::Shared.Messages
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<h1>Subscribe to Pipeline</h1>

<p>
    <button class="btn btn-primary" @onclick="Toggle">@buttonText</button>
</p>

<p>
    <span class="text-nowrap">@connectionStatus</span>
</p>

<p>
    @foreach(var message in messages)
    {
        <div>@message</div>
    }
</p>

@code {
    private HubConnection? hubConnection;
    private string projectId = "12345"; // would be from route or UI in the real world
    private string connectionStatus = "";  
    private bool subscribed = false;
    private string buttonText = "Subscribe";
    private List<string> messages = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/pipelinehub"))
            .Build();

        hubConnection.On<PipelineMessage>("Receive", (message) =>
        {
            if (messages.Count() > 10)
            {
                messages.Clear();
            }

            messages.Add($"{DateTime.Now}: {message.Status}");

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Toggle()
    {
        if (subscribed)
        {
            await Unsubscribe();
        }
        else
        {
            await Subscribe();
        }

        subscribed = !subscribed;
        buttonText = subscribed ? "Unsubscribe" : "Subscribe";
    }

    private async Task Subscribe()
    {
        connectionStatus = "Connecting...";

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Subscribe", "12345");
            connectionStatus = "Connected";
        }
    }

    private async Task Unsubscribe()
    {
        connectionStatus = "";
        messages.Clear();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Unsubscribe", "12345");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Unsubscribe", "12345");
            await hubConnection.DisposeAsync();
        }
    }
}